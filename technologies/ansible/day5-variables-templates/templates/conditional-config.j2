# Conditional Configuration Template Demo
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
# Demonstrating advanced Jinja2 conditional logic and template features

# ===========================================
# Environment-Based Configuration
# ===========================================

{% if app_config.environment == 'production' %}
# PRODUCTION CONFIGURATION
[environment]
name = production
debug = false
log_level = WARNING
performance_mode = high
security_level = maximum

[database]
host = {{ servers | selectattr('role', 'equalto', 'database') | map(attribute='ip') | first | default('localhost') }}
pool_size = 20
connection_timeout = 30
query_timeout = 60
ssl_required = true

[cache]
enabled = true
{% if servers | selectattr('role', 'equalto', 'api') | list %}
type = redis
host = {{ servers | selectattr('role', 'equalto', 'api') | map(attribute='ip') | first }}
{% else %}
type = memory
{% endif %}
ttl = 3600
max_memory = {{ (ansible_memtotal_mb * 0.2) | int }}MB

[security]
session_timeout = 3600
max_login_attempts = 3
password_complexity = high
audit_logging = true

{% elif app_config.environment == 'staging' %}
# STAGING CONFIGURATION  
[environment]
name = staging
debug = true
log_level = INFO
performance_mode = normal
security_level = medium

[database]
host = {{ servers | selectattr('role', 'equalto', 'database') | map(attribute='ip') | first | default('localhost') }}
pool_size = 10
connection_timeout = 20
query_timeout = 30
ssl_required = false

[cache]
enabled = true
{% if servers | selectattr('role', 'equalto', 'api') | list %}
type = redis
host = {{ servers | selectattr('role', 'equalto', 'api') | map(attribute='ip') | first }}
{% else %}
type = memory
{% endif %}
ttl = 1800
max_memory = {{ (ansible_memtotal_mb * 0.1) | int }}MB

[security]
session_timeout = 7200
max_login_attempts = 5
password_complexity = medium
audit_logging = true

{% else %}
# DEVELOPMENT CONFIGURATION
[environment]
name = development
debug = true
log_level = DEBUG
performance_mode = low
security_level = basic

[database]
host = localhost
pool_size = 5
connection_timeout = 10
query_timeout = 15
ssl_required = false

[cache]
enabled = false
type = memory
ttl = 300
max_memory = {{ (ansible_memtotal_mb * 0.05) | int }}MB

[security]
session_timeout = 86400
max_login_attempts = 10
password_complexity = low
audit_logging = false
{% endif %}

# ===========================================
# Feature Flags Based on Environment
# ===========================================

[features]
{% for feature_name, enabled in features.items() %}
{{ feature_name }} = {{ enabled | lower }}
{% endfor %}

# Additional computed features
new_user_registration = {{ app_config.environment != 'production' }}
admin_panel_access = {{ users | selectattr('role', 'equalto', 'admin') | list | length > 0 }}
analytics_tracking = {{ app_config.environment == 'production' }}
error_reporting = true
maintenance_mode = false

# ===========================================
# User Role-Based Configuration
# ===========================================

{% for role, role_users in users | groupby('role') %}
[role_{{ role }}]
count = {{ role_users | length }}
active_count = {{ role_users | selectattr('active') | list | length }}
{% set role_permissions = role_users | map(attribute='permissions') | sum(start=[]) | unique | list %}
permissions = {{ role_permissions | join(', ') }}

{% if role == 'admin' %}
# Admin-specific settings
dashboard_access = full
system_settings = read_write
user_management = full
log_access = full
backup_access = true
{% elif role == 'developer' %}
# Developer-specific settings
dashboard_access = limited
system_settings = read_only
user_management = limited
log_access = application_only
backup_access = false
{% elif role == 'manager' %}
# Manager-specific settings
dashboard_access = reports
system_settings = read_only
user_management = view_only
log_access = summary_only
backup_access = false
{% else %}
# Default role settings
dashboard_access = basic
system_settings = none
user_management = none
log_access = none
backup_access = false
{% endif %}

{% endfor %}

# ===========================================
# System Resource Configuration
# ===========================================

[system_resources]
total_memory_mb = {{ ansible_memtotal_mb }}
total_cpu_cores = {{ ansible_processor_vcpus }}
architecture = {{ ansible_architecture }}
os_family = {{ ansible_os_family }}

# Memory allocation strategy
{% if ansible_memtotal_mb >= 16384 %}
# High memory system (16GB+)
app_memory_allocation = {{ (ansible_memtotal_mb * 0.6) | int }}MB
database_memory = {{ (ansible_memtotal_mb * 0.25) | int }}MB
cache_memory = {{ (ansible_memtotal_mb * 0.1) | int }}MB
system_reserved = {{ (ansible_memtotal_mb * 0.05) | int }}MB
performance_profile = high
{% elif ansible_memtotal_mb >= 8192 %}
# Medium memory system (8-16GB)
app_memory_allocation = {{ (ansible_memtotal_mb * 0.5) | int }}MB
database_memory = {{ (ansible_memtotal_mb * 0.3) | int }}MB
cache_memory = {{ (ansible_memtotal_mb * 0.1) | int }}MB
system_reserved = {{ (ansible_memtotal_mb * 0.1) | int }}MB
performance_profile = medium
{% elif ansible_memtotal_mb >= 4096 %}
# Standard memory system (4-8GB)
app_memory_allocation = {{ (ansible_memtotal_mb * 0.4) | int }}MB
database_memory = {{ (ansible_memtotal_mb * 0.35) | int }}MB
cache_memory = {{ (ansible_memtotal_mb * 0.1) | int }}MB
system_reserved = {{ (ansible_memtotal_mb * 0.15) | int }}MB
performance_profile = standard
{% else %}
# Low memory system (<4GB)
app_memory_allocation = {{ (ansible_memtotal_mb * 0.3) | int }}MB
database_memory = {{ (ansible_memtotal_mb * 0.4) | int }}MB
cache_memory = {{ (ansible_memtotal_mb * 0.1) | int }}MB
system_reserved = {{ (ansible_memtotal_mb * 0.2) | int }}MB
performance_profile = conservative
{% endif %}

# CPU allocation
{% if ansible_processor_vcpus >= 8 %}
# High CPU system
nginx_workers = {{ ansible_processor_vcpus }}
app_workers = {{ ansible_processor_vcpus * 2 }}
database_threads = {{ ansible_processor_vcpus }}
background_workers = {{ ansible_processor_vcpus // 2 }}
{% elif ansible_processor_vcpus >= 4 %}
# Medium CPU system
nginx_workers = {{ ansible_processor_vcpus }}
app_workers = {{ ansible_processor_vcpus }}
database_threads = {{ ansible_processor_vcpus // 2 }}
background_workers = 2
{% else %}
# Low CPU system
nginx_workers = {{ ansible_processor_vcpus }}
app_workers = {{ ansible_processor_vcpus }}
database_threads = 1
background_workers = 1
{% endif %}

# ===========================================
# Server Role-Based Services
# ===========================================

{% for server in servers %}
[server_{{ server.hostname }}]
ip = {{ server.ip }}
role = {{ server.role }}
cpu_cores = {{ server.specs.cpu }}
memory_gb = {{ (server.specs.memory / 1024) | round(1) }}
disk_gb = {{ server.specs.disk }}

# Role-specific configuration
{% if server.role == 'frontend' %}
# Frontend server configuration
nginx_enabled = true
ssl_termination = true
load_balancer = {{ servers | selectattr('role', 'equalto', 'frontend') | list | length > 1 }}
static_content = true
compression = true
caching = aggressive

services = {{ server.services | join(', ') }}
{% if server.specs.memory >= 8192 %}
worker_connections = 2048
keepalive_timeout = 65
{% else %}
worker_connections = 1024
keepalive_timeout = 30
{% endif %}

{% elif server.role == 'api' %}
# API server configuration
application_server = true
database_connection = true
cache_server = true
background_jobs = true

services = {{ server.services | join(', ') }}
{% if server.specs.cpu >= 4 %}
api_workers = {{ server.specs.cpu * 2 }}
queue_workers = {{ server.specs.cpu }}
{% else %}
api_workers = {{ server.specs.cpu }}
queue_workers = 1
{% endif %}

{% elif server.role == 'database' %}
# Database server configuration
mysql_server = true
backup_enabled = {{ app_config.environment == 'production' }}
replication = {{ servers | selectattr('role', 'equalto', 'database') | list | length > 1 }}

services = {{ server.services | join(', ') }}
innodb_buffer_pool = {{ (server.specs.memory * 0.7) | int }}MB
max_connections = {{ server.specs.cpu * 50 }}
query_cache = {{ (server.specs.memory * 0.1) | int }}MB

{% endif %}

{% endfor %}

# ===========================================
# Monitoring Configuration
# ===========================================

{% if monitoring.enabled | default(false) %}
[monitoring]
enabled = true
prometheus_port = 9090
grafana_port = 3000
node_exporter_port = 9100

# Health check endpoints
{% for endpoint in monitoring.endpoints %}
{{ endpoint.name }}_endpoint = {{ endpoint.path }}
{{ endpoint.name }}_interval = {{ endpoint.check_interval }}
{% endfor %}

# Alert thresholds
{% for alert in monitoring.alerts %}
alert_{{ alert.metric }}_threshold = {{ alert.threshold }}
alert_{{ alert.metric }}_severity = {{ alert.severity }}
{% endfor %}

# Retention policies
{% if app_config.environment == 'production' %}
metrics_retention = 30d
logs_retention = 90d
alert_retention = 365d
{% elif app_config.environment == 'staging' %}
metrics_retention = 14d
logs_retention = 30d
alert_retention = 90d
{% else %}
metrics_retention = 7d
logs_retention = 7d
alert_retention = 30d
{% endif %}

{% else %}
[monitoring]
enabled = false
{% endif %}

# ===========================================
# Network and Security Configuration
# ===========================================

[network]
{% if websites %}
# Website configurations
{% for website in websites %}
domain_{{ loop.index }} = {{ website.domain }}
ssl_{{ loop.index }} = {{ website.ssl | default(false) }}
{% if website.auth_required | default(false) %}
auth_required_{{ loop.index }} = true
{% endif %}
{% endfor %}
{% endif %}

# Firewall rules
allow_ssh = {{ app_config.environment != 'production' }}
allow_http = true
allow_https = {{ (websites and websites[0].ssl) | default(false) }}

{% if app_config.environment == 'production' %}
# Production network security
fail2ban_enabled = true
ssh_key_only = true
admin_ip_whitelist = 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
{% elif app_config.environment == 'staging' %}
# Staging network security
fail2ban_enabled = true
ssh_key_only = false
admin_ip_whitelist = 0.0.0.0/0
{% else %}
# Development network security
fail2ban_enabled = false
ssh_key_only = false
admin_ip_whitelist = 0.0.0.0/0
{% endif %}

# ===========================================
# Backup and Maintenance
# ===========================================

[backup]
{% if app_config.environment == 'production' %}
enabled = true
schedule_database = "0 2 * * *"  # Daily at 2 AM
schedule_files = "0 3 * * 0"     # Weekly on Sunday at 3 AM
retention_days = 30
remote_backup = true
encryption = true
{% elif app_config.environment == 'staging' %}
enabled = true
schedule_database = "0 2 * * 0"  # Weekly on Sunday at 2 AM
schedule_files = "0 3 * * 0"     # Weekly on Sunday at 3 AM
retention_days = 14
remote_backup = false
encryption = false
{% else %}
enabled = false
{% endif %}

[maintenance]
{% if app_config.environment == 'production' %}
window_start = "02:00"
window_end = "04:00"
window_day = "Sunday"
auto_updates = false
{% else %}
window_start = "00:00"
window_end = "23:59"
window_day = "Any"
auto_updates = true
{% endif %}

# ===========================================
# Advanced Template Features Demo
# ===========================================

[template_features]
# Loop variables
total_servers = {{ servers | length }}
server_list = {% for server in servers %}{{ server.hostname }}{% if not loop.last %}, {% endif %}{% endfor %}

# Complex filtering
active_admins = {{ users | selectattr('active') | selectattr('role', 'equalto', 'admin') | map(attribute='name') | join(', ') }}
production_servers = {{ servers | selectattr('specs.memory', 'gt', 8192) | map(attribute='hostname') | join(', ') }}

# Mathematical operations
total_memory_gb = {{ servers | map(attribute='specs.memory') | sum / 1024 | round(1) }}
average_cpu_cores = {{ servers | map(attribute='specs.cpu') | sum / servers | length | round(1) }}
memory_utilization = {{ (ansible_memtotal_mb / (servers | map(attribute='specs.memory') | sum / servers | length)) * 100 | round(2) }}%

# Date/time operations
config_generated = {{ ansible_date_time.iso8601 }}
config_expiry = {{ (ansible_date_time.epoch | int + 86400) | strftime('%Y-%m-%d %H:%M:%S') }}
uptime_days = {{ (ansible_uptime_seconds / 86400) | round(1) }}

# String operations
app_name_upper = {{ app_config.name | upper }}
app_name_slug = {{ app_config.name | lower | replace(' ', '-') }}
random_server = {{ servers | random }}

# Boolean logic
has_ssl = {{ (websites and websites[0].ssl) | default(false) }}
needs_load_balancer = {{ servers | selectattr('role', 'equalto', 'frontend') | list | length > 1 }}
is_clustered = {{ servers | length > 1 }}

# JSON operations
server_summary = {{ servers | map(attribute='hostname') | list | to_json }}
user_count_by_role = {{ users | groupby('role') | map('last') | map('length') | list | to_json }}

# File system info
{% if ansible_mounts is defined %}
root_partition_usage = {{ ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_available') | first | filesizeformat }}
{% endif %}

# Network info
{% if ansible_default_ipv4 is defined %}
primary_ip = {{ ansible_default_ipv4.address }}
primary_interface = {{ ansible_default_ipv4.interface }}
primary_gateway = {{ ansible_default_ipv4.gateway }}
{% endif %}

# ===========================================
# Configuration Validation
# ===========================================

[validation]
# Check required components
database_configured = {{ servers | selectattr('role', 'equalto', 'database') | list | length > 0 }}
cache_configured = {{ servers | selectattr('role', 'equalto', 'api') | list | length > 0 }}
web_servers_configured = {{ servers | selectattr('role', 'equalto', 'frontend') | list | length > 0 }}
admin_users_exist = {{ users | selectattr('role', 'equalto', 'admin') | list | length > 0 }}
monitoring_setup = {{ monitoring.enabled | default(false) }}

# Environment consistency checks
environment_valid = {{ app_config.environment in ['development', 'staging', 'production'] }}
memory_sufficient = {{ ansible_memtotal_mb >= 2048 }}
cpu_sufficient = {{ ansible_processor_vcpus >= 2 }}
disk_sufficient = true  # Add actual disk check logic

# Security checks
ssl_in_production = {{ not (app_config.environment == 'production') or (websites and websites[0].ssl) | default(false) }}
admin_access_restricted = {{ not (app_config.environment == 'production') or true }}  # Add IP restriction check

# Report validation summary
validation_passed = {{ (servers | length > 0) and (users | length > 0) and (app_config.environment in ['development', 'staging', 'production']) }}

# ===========================================
# END OF CONFIGURATION
# ===========================================

# Generated on: {{ ansible_date_time.iso8601 }}
# Target host: {{ inventory_hostname }}
# Ansible version: {{ ansible_version.full }}
# Total variables processed: {{ vars | length }}
# Configuration checksum: {{ (app_config | to_json + users | to_json + servers | to_json) | hash('md5') }} 