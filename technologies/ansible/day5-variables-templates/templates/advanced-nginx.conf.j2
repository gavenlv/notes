# Advanced Nginx Configuration
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
# Target host: {{ inventory_hostname }}

user www-data;
worker_processes {{ worker_processes | default(ansible_processor_vcpus) }};
worker_rlimit_nofile {{ (worker_connections | int * 2) }};
pid /var/run/nginx.pid;

events {
    worker_connections {{ worker_connections | default(1024) }};
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Buffer Settings
    client_body_buffer_size 128k;
    client_max_body_size 50m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;
    
    # MIME Types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging Configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '$request_time $upstream_response_time';
    
    log_format json_analytics escape=json '{'
                    '"time_local":"$time_local",'
                    '"remote_addr":"$remote_addr",'
                    '"remote_user":"$remote_user",'
                    '"request":"$request",'
                    '"status": "$status",'
                    '"body_bytes_sent":"$body_bytes_sent",'
                    '"request_time":"$request_time",'
                    '"http_referrer":"$http_referer",'
                    '"http_user_agent":"$http_user_agent"'
                    '}';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Gzip Configuration
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security Headers (will be inherited by all servers)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    {% if servers is defined %}
    # Upstream Configuration
    {% for server in servers %}
    {% if server.role == 'api' %}
    upstream api-backend-{{ loop.index }} {
        least_conn;
        server {{ server.ip }}:8080 weight=1 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    {% endif %}
    {% endfor %}
    
    upstream api-backend {
        {% for server in servers %}
        {% if server.role == 'api' %}
        server {{ server.ip }}:8080 weight=1 max_fails=3 fail_timeout=30s;
        {% endif %}
        {% endfor %}
        keepalive 32;
    }
    {% endif %}
    
    # Main Virtual Hosts
    {% for site in websites %}
    server {
        {% if site.ssl | default(false) %}
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        {% else %}
        listen 80;
        listen [::]:80;
        {% endif %}
        
        server_name {{ site.domain }};
        
        {% if site.ssl | default(false) %}
        # SSL Configuration for {{ site.domain }}
        ssl_certificate /etc/ssl/certs/{{ site.domain }}.crt;
        ssl_certificate_key /etc/ssl/private/{{ site.domain }}.key;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        {% endif %}
        
        {% if site.auth_required | default(false) %}
        # Basic Authentication
        auth_basic "Restricted Access";
        auth_basic_user_file /etc/nginx/.htpasswd;
        {% endif %}
        
        # Connection limiting
        limit_conn addr 10;
        
        {% for location in site.locations %}
        location {{ location.path }} {
            {% if location.path == '/api/' %}
            # API specific rate limiting
            limit_req zone=api burst=20 nodelay;
            {% endif %}
            
            {% if location.path == '/login' %}
            # Login rate limiting
            limit_req zone=login burst=5 nodelay;
            {% endif %}
            
            {% for directive, value in location.config.items() %}
            {{ directive }} {{ value }};
            {% endfor %}
            
            {% if location.path == '/api/' %}
            # API proxy headers
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            {% endif %}
        }
        {% endfor %}
        
        # Common locations
        location = /favicon.ico {
            log_not_found off;
            access_log off;
            expires 1y;
        }
        
        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }
        
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Static files caching
        location ~* \.(jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
        
        location ~* \.(css|js)$ {
            expires 1M;
            add_header Cache-Control "public";
            access_log off;
        }
        
        {% if monitoring.enabled | default(false) %}
        # Monitoring endpoints
        {% for endpoint in monitoring.endpoints %}
        location {{ endpoint.path }} {
            access_log off;
            allow 127.0.0.1;
            allow ::1;
            {% if servers is defined %}
            {% for server in servers %}
            allow {{ server.ip }};
            {% endfor %}
            {% endif %}
            deny all;
            
            {% if endpoint.name == 'metrics' %}
            # Prometheus metrics
            proxy_pass http://localhost:9090{{ endpoint.path }};
            {% else %}
            # Health check
            return 200 "healthy\n";
            add_header Content-Type text/plain;
            {% endif %}
        }
        {% endfor %}
        {% endif %}
        
        # Logging
        access_log /var/log/nginx/{{ site.domain }}.access.log main;
        error_log /var/log/nginx/{{ site.domain }}.error.log;
    }
    
    {% if not site.ssl | default(false) %}
    # HTTP to HTTPS redirect for {{ site.domain }}
    server {
        listen 80;
        listen [::]:80;
        server_name {{ site.domain }};
        return 301 https://$server_name$request_uri;
    }
    {% endif %}
    {% endfor %}
    
    # Default server (catch-all)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        
        server_name _;
        
        # Self-signed certificate for default server
        ssl_certificate /etc/ssl/certs/default.crt;
        ssl_certificate_key /etc/ssl/private/default.key;
        
        # Return 444 for undefined hosts
        return 444;
    }
    
    # Server status (for monitoring)
    server {
        listen 127.0.0.1:8080;
        server_name localhost;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
        
        location /nginx_info {
            return 200 "Nginx running on {{ inventory_hostname }}\nWorker processes: {{ worker_processes }}\nGenerated: {{ ansible_date_time.iso8601 }}\n";
            add_header Content-Type text/plain;
        }
    }
}

# Stream module for TCP/UDP load balancing
stream {
    # MySQL load balancing
    {% set db_servers = servers | selectattr('role', 'equalto', 'database') | list %}
    {% if db_servers | length > 0 %}
    upstream mysql_backend {
        {% for db_server in db_servers %}
        server {{ db_server.ip }}:3306 weight=1 max_fails=3 fail_timeout=30s;
        {% endfor %}
    }
    
    server {
        listen 3306;
        proxy_pass mysql_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        error_log /var/log/nginx/mysql_proxy.log;
    }
    {% endif %}
} 