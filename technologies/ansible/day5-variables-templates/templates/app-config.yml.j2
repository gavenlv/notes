# {{ app_config.name }} Application Configuration
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
# Environment: {{ app_config.environment }}
# Version: {{ app_config.version }}

application:
  name: "{{ app_config.name }}"
  version: "{{ app_config.version }}"
  environment: "{{ app_config.environment }}"
  debug: {{ app_config.environment != 'production' }}
  
  # Server configuration
  server:
    host: "0.0.0.0"
    {% if app_config.environment == 'production' %}
    port: 8080
    workers: {{ ansible_processor_vcpus * 2 }}
    {% elif app_config.environment == 'staging' %}
    port: 8081
    workers: {{ ansible_processor_vcpus }}
    {% else %}
    port: 3000
    workers: 1
    {% endif %}
    timeout: 30
    keepalive: 2
    max_requests: 1000
    max_requests_jitter: 100
    
  # Database configuration
  database:
    {% set db_servers = servers | selectattr('role', 'equalto', 'database') | list %}
    {% if db_servers %}
    host: "{{ db_servers[0].ip }}"
    {% else %}
    host: "localhost"
    {% endif %}
    port: 3306
    name: "{{ app_config.name | lower }}_{{ app_config.environment }}"
    user: "{{ app_config.name | lower }}_user"
    password: "{{ app_config.name | lower }}_password_{{ app_config.environment }}"
    
    # Connection pool settings
    {% if app_config.environment == 'production' %}
    pool_size: 20
    max_overflow: 30
    pool_timeout: 30
    pool_recycle: 3600
    {% elif app_config.environment == 'staging' %}
    pool_size: 10
    max_overflow: 15
    pool_timeout: 20
    pool_recycle: 1800
    {% else %}
    pool_size: 5
    max_overflow: 10
    pool_timeout: 10
    pool_recycle: 600
    {% endif %}
    
    # Additional database options
    charset: "utf8mb4"
    autocommit: true
    connect_timeout: 10
    read_timeout: 30
    write_timeout: 30
    
  # Redis/Cache configuration
  cache:
    {% set api_servers = servers | selectattr('role', 'equalto', 'api') | list %}
    {% if api_servers %}
    enabled: true
    type: "redis"
    host: "{{ api_servers[0].ip }}"
    port: 6379
    db: {{ 0 if app_config.environment == 'production' else 1 }}
    {% else %}
    enabled: false
    type: "memory"
    {% endif %}
    
    # Cache settings
    {% if app_config.environment == 'production' %}
    default_timeout: 3600
    key_prefix: "{{ app_config.name }}_prod_"
    {% elif app_config.environment == 'staging' %}
    default_timeout: 1800
    key_prefix: "{{ app_config.name }}_staging_"
    {% else %}
    default_timeout: 300
    key_prefix: "{{ app_config.name }}_dev_"
    {% endif %}
    
  # Logging configuration
  logging:
    {% if app_config.environment == 'production' %}
    level: "WARNING"
    {% elif app_config.environment == 'staging' %}
    level: "INFO"
    {% else %}
    level: "DEBUG"
    {% endif %}
    
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    
    # File logging
    file:
      enabled: true
      path: "/var/log/{{ app_config.name | lower }}/application.log"
      max_bytes: 10485760  # 10MB
      backup_count: 5
      
    # Syslog
    syslog:
      enabled: {{ app_config.environment == 'production' }}
      address: "/dev/log"
      facility: "local0"
      
    # JSON logging for production
    json_format: {{ app_config.environment == 'production' }}
    
  # Security settings
  security:
    secret_key: "{{ app_config.name | lower }}_secret_{{ app_config.environment }}_{{ ansible_date_time.epoch }}"
    password_hash_algorithm: "bcrypt"
    password_hash_rounds: {{ 12 if app_config.environment == 'production' else 10 }}
    session_timeout: {{ 3600 if app_config.environment == 'production' else 7200 }}
    max_login_attempts: 5
    lockout_duration: 300
    
    # CORS settings
    cors:
      enabled: true
      {% if app_config.environment == 'production' %}
      origins:
        {% for website in websites %}
        - "https://{{ website.domain }}"
        {% endfor %}
      {% else %}
      origins:
        - "*"
      {% endif %}
      methods:
        - "GET"
        - "POST"
        - "PUT"
        - "DELETE"
      headers:
        - "Content-Type"
        - "Authorization"
        
  # Feature flags
  features:
    {% if app_config.environment == 'production' %}
    new_dashboard: true
    experimental_api: false
    debug_toolbar: false
    rate_limiting: true
    metrics_collection: true
    error_reporting: true
    {% elif app_config.environment == 'staging' %}
    new_dashboard: true
    experimental_api: true
    debug_toolbar: true
    rate_limiting: true
    metrics_collection: true
    error_reporting: true
    {% else %}
    new_dashboard: true
    experimental_api: true
    debug_toolbar: true
    rate_limiting: false
    metrics_collection: false
    error_reporting: false
    {% endif %}
    
  # External services
  external_services:
    # Email service
    email:
      {% if app_config.environment == 'production' %}
      provider: "smtp"
      smtp_host: "smtp.company.com"
      smtp_port: 587
      smtp_username: "{{ app_config.name | lower }}@company.com"
      smtp_password: "email_password_{{ app_config.environment }}"
      use_tls: true
      {% else %}
      provider: "console"
      {% endif %}
      
    # File storage
    storage:
      {% if app_config.environment == 'production' %}
      provider: "s3"
      bucket: "{{ app_config.name | lower }}-{{ app_config.environment }}"
      region: "us-east-1"
      {% else %}
      provider: "local"
      path: "/var/lib/{{ app_config.name | lower }}/uploads"
      {% endif %}
      max_file_size: 52428800  # 50MB
      allowed_extensions:
        - "jpg"
        - "jpeg"
        - "png"
        - "gif"
        - "pdf"
        - "doc"
        - "docx"
        - "txt"
        
# Infrastructure settings
infrastructure:
  # Load balancer configuration
  load_balancer:
    {% set frontend_servers = servers | selectattr('role', 'equalto', 'frontend') | list %}
    enabled: {{ frontend_servers | length > 1 }}
    algorithm: "round_robin"
    health_check:
      enabled: true
      path: "/health"
      interval: 30
      timeout: 5
      retries: 3
      
  # Monitoring
  monitoring:
    enabled: {{ monitoring.enabled | default(false) }}
    {% if monitoring.enabled | default(false) %}
    
    # Prometheus metrics
    prometheus:
      enabled: true
      endpoint: "/metrics"
      scrape_interval: "15s"
      labels:
        environment: "{{ app_config.environment }}"
        application: "{{ app_config.name | lower }}"
        version: "{{ app_config.version }}"
        
    # Health checks
    health_checks:
      {% for endpoint in monitoring.endpoints %}
      - name: "{{ endpoint.name }}"
        path: "{{ endpoint.path }}"
        check_interval: "{{ endpoint.check_interval }}"
      {% endfor %}
      
    # Alerting
    alerts:
      {% for alert in monitoring.alerts %}
      - metric: "{{ alert.metric }}"
        threshold: {{ alert.threshold }}
        severity: "{{ alert.severity }}"
        {% if alert.metric == 'cpu_usage' %}
        description: "CPU usage above {{ alert.threshold }}%"
        {% elif alert.metric == 'memory_usage' %}
        description: "Memory usage above {{ alert.threshold }}%"
        {% elif alert.metric == 'disk_usage' %}
        description: "Disk usage above {{ alert.threshold }}%"
        {% endif %}
      {% endfor %}
    {% endif %}
    
# Deployment configuration
deployment:
  strategy: "rolling"
  max_unavailable: 1
  max_surge: 1
  
  # Health check during deployment
  readiness_probe:
    path: "/health"
    initial_delay: 30
    period: 10
    timeout: 5
    failure_threshold: 3
    
  liveness_probe:
    path: "/health"
    initial_delay: 60
    period: 30
    timeout: 10
    failure_threshold: 3
    
  # Resource limits
  resources:
    {% if app_config.environment == 'production' %}
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "2000m"
      memory: "4Gi"
    {% elif app_config.environment == 'staging' %}
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "1000m"
      memory: "2Gi"
    {% else %}
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "1Gi"
    {% endif %}
    
# Environment-specific overrides
{% if app_config.environment == 'production' %}
# Production-specific settings
production:
  backup:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM
    retention_days: 30
    
  ssl:
    enabled: true
    certificate_path: "/etc/ssl/certs/{{ app_config.name | lower }}.crt"
    private_key_path: "/etc/ssl/private/{{ app_config.name | lower }}.key"
    
  rate_limiting:
    requests_per_minute: 1000
    burst_size: 100
    
{% elif app_config.environment == 'staging' %}
# Staging-specific settings
staging:
  backup:
    enabled: false
    
  ssl:
    enabled: false
    
  rate_limiting:
    requests_per_minute: 500
    burst_size: 50
    
{% else %}
# Development-specific settings
development:
  backup:
    enabled: false
    
  ssl:
    enabled: false
    
  auto_reload: true
  hot_reload: true
  
  # Development tools
  tools:
    profiler: true
    debugger: true
    sql_echo: true
{% endif %}

# User management integration
users:
  # Active application users
  active_users:
    {% for user in users if user.active %}
    - username: "{{ user.name }}"
      email: "{{ user.email }}"
      role: "{{ user.role }}"
      department: "{{ user.department }}"
      permissions: {{ user.permissions | to_json }}
    {% endfor %}
    
  # Role-based access control
  rbac:
    {% for role, role_users in users | groupby('role') %}
    {{ role }}:
      description: "{{ role | title }} users"
      count: {{ role_users | length }}
      active_count: {{ role_users | selectattr('active') | list | length }}
      permissions:
        {% set all_permissions = role_users | map(attribute='permissions') | sum(start=[]) | unique | list %}
        {% for permission in all_permissions %}
        - "{{ permission }}"
        {% endfor %}
    {% endfor %}

# Server infrastructure mapping
infrastructure_mapping:
  {% for server in servers %}
  {{ server.hostname }}:
    ip: "{{ server.ip }}"
    role: "{{ server.role }}"
    services: {{ server.services | to_json }}
    specs:
      cpu_cores: {{ server.specs.cpu }}
      memory_mb: {{ server.specs.memory }}
      disk_gb: {{ server.specs.disk }}
    {% if server.role == 'frontend' %}
    # Frontend server specific config
    nginx_config: "/etc/nginx/sites-available/{{ app_config.name | lower }}"
    document_root: "/var/www/{{ app_config.name | lower }}"
    {% elif server.role == 'api' %}
    # API server specific config
    api_port: 8080
    worker_processes: {{ server.specs.cpu }}
    {% elif server.role == 'database' %}
    # Database server specific config
    mysql_port: 3306
    data_directory: "/var/lib/mysql"
    log_directory: "/var/log/mysql"
    {% endif %}
  {% endfor %}

# Configuration validation
validation:
  config_version: "1.0"
  generated_by: "Ansible {{ ansible_version.full }}"
  generated_on: "{{ ansible_date_time.iso8601 }}"
  target_host: "{{ inventory_hostname }}"
  checksum: "{{ (app_config | to_json + ansible_date_time.epoch | string) | hash('md5') }}" 