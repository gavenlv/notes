#!/bin/bash

# User Management Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
# Application: {{ app_config.name }}

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root"
        exit 1
    fi
}

# Create user groups
create_groups() {
    log "Creating user groups..."
    
    {% set departments = users | map(attribute='department') | unique | list %}
    {% for dept in departments %}
    if ! getent group "{{ dept }}" >/dev/null 2>&1; then
        groupadd "{{ dept }}"
        success "Created group: {{ dept }}"
    else
        warning "Group {{ dept }} already exists"
    fi
    {% endfor %}
    
    # Create role-based groups
    {% set roles = users | map(attribute='role') | unique | list %}
    {% for role in roles %}
    if ! getent group "{{ role }}s" >/dev/null 2>&1; then
        groupadd "{{ role }}s"
        success "Created group: {{ role }}s"
    else
        warning "Group {{ role }}s already exists"
    fi
    {% endfor %}
}

# Create users
create_users() {
    log "Creating users..."
    
    {% for user in users %}
    log "Processing user: {{ user.name }}"
    
    if ! id "{{ user.name }}" >/dev/null 2>&1; then
        # Create user
        useradd -m -s /bin/bash \
                -c "{{ user.role | title }} - {{ user.department | title }}" \
                -G "{{ user.department }},{{ user.role }}s" \
                "{{ user.name }}"
        
        success "Created user: {{ user.name }}"
        
        # Set up SSH directory
        mkdir -p "/home/{{ user.name }}/.ssh"
        chmod 700 "/home/{{ user.name }}/.ssh"
        chown "{{ user.name }}:{{ user.name }}" "/home/{{ user.name }}/.ssh"
        
        # Create user-specific directories
        mkdir -p "/home/{{ user.name }}/workspace"
        mkdir -p "/home/{{ user.name }}/bin"
        mkdir -p "/home/{{ user.name }}/logs"
        
        chown -R "{{ user.name }}:{{ user.name }}" "/home/{{ user.name }}"
        
        {% if user.role == 'admin' %}
        # Add admin users to sudo group
        usermod -a -G sudo "{{ user.name }}"
        success "Added {{ user.name }} to sudo group"
        {% endif %}
        
    else
        warning "User {{ user.name }} already exists"
        
        # Update groups
        usermod -G "{{ user.department }},{{ user.role }}s{% if user.role == 'admin' %},sudo{% endif %}" "{{ user.name }}"
        success "Updated groups for {{ user.name }}"
    fi
    
    {% if not user.active %}
    # Deactivate inactive users
    usermod -L "{{ user.name }}"
    warning "Deactivated user: {{ user.name }}"
    {% endif %}
    
    {% endfor %}
}

# Setup SSH keys
setup_ssh_keys() {
    log "Setting up SSH keys..."
    
    {% for user in users if user.active %}
    SSH_KEY_FILE="/home/{{ user.name }}/.ssh/authorized_keys"
    
    # Create SSH key placeholder (in real deployment, you'd add actual keys)
    if [[ ! -f "$SSH_KEY_FILE" ]]; then
        cat > "$SSH_KEY_FILE" << 'EOF'
# SSH public keys for {{ user.name }}
# Add your SSH public keys here
# Example:
# ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC... {{ user.email }}
EOF
        chmod 600 "$SSH_KEY_FILE"
        chown "{{ user.name }}:{{ user.name }}" "$SSH_KEY_FILE"
        success "Created SSH key file for {{ user.name }}"
    fi
    {% endfor %}
}

# Configure sudo permissions
configure_sudo() {
    log "Configuring sudo permissions..."
    
    # Create sudoers file for application
    cat > "/etc/sudoers.d/{{ app_config.name | lower }}_users" << 'EOF'
# {{ app_config.name }} Application Users Sudo Configuration
# Generated on {{ ansible_date_time.iso8601 }}

{% for user in users %}
{% if user.role == 'admin' and user.active %}
# Admin user: {{ user.name }}
{{ user.name }} ALL=(ALL) NOPASSWD: ALL

{% elif user.role == 'developer' and user.active %}
# Developer: {{ user.name }}
{{ user.name }} ALL=(ALL) NOPASSWD: /bin/systemctl restart nginx
{{ user.name }} ALL=(ALL) NOPASSWD: /bin/systemctl reload nginx
{{ user.name }} ALL=(ALL) NOPASSWD: /bin/systemctl status nginx
{{ user.name }} ALL=(ALL) NOPASSWD: /usr/bin/tail -f /var/log/nginx/*
{{ user.name }} ALL=(ALL) NOPASSWD: /usr/bin/less /var/log/nginx/*

{% elif user.role == 'manager' and user.active %}
# Manager: {{ user.name }}
{{ user.name }} ALL=(ALL) NOPASSWD: /bin/systemctl status *
{{ user.name }} ALL=(ALL) NOPASSWD: /usr/bin/ps aux
{{ user.name }} ALL=(ALL) NOPASSWD: /usr/bin/top

{% endif %}
{% endfor %}

# Group-based permissions
%admins ALL=(ALL) NOPASSWD: ALL
%developers ALL=(ALL) NOPASSWD: /bin/systemctl restart nginx, /bin/systemctl reload nginx
%managers ALL=(ALL) NOPASSWD: /bin/systemctl status *

EOF

    # Validate sudoers file
    if visudo -c -f "/etc/sudoers.d/{{ app_config.name | lower }}_users"; then
        success "Sudoers configuration is valid"
    else
        error "Sudoers configuration has errors"
        rm "/etc/sudoers.d/{{ app_config.name | lower }}_users"
        exit 1
    fi
}

# Setup user environment
setup_user_environment() {
    log "Setting up user environments..."
    
    {% for user in users if user.active %}
    log "Configuring environment for {{ user.name }}"
    
    # Create custom bashrc
    cat > "/home/{{ user.name }}/.bashrc_custom" << 'EOF'
# Custom environment for {{ user.name }}
# Role: {{ user.role | title }}
# Department: {{ user.department | title }}

# Environment variables
export USER_ROLE="{{ user.role }}"
export USER_DEPARTMENT="{{ user.department }}"
export USER_EMAIL="{{ user.email }}"

# Custom aliases
alias ll='ls -la'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias grep='grep --color=auto'
alias h='history'
alias c='clear'

{% if user.role == 'admin' %}
# Admin-specific aliases
alias syslog='sudo tail -f /var/log/syslog'
alias nginx-status='sudo systemctl status nginx'
alias nginx-restart='sudo systemctl restart nginx'
alias nginx-reload='sudo systemctl reload nginx'
alias disk-usage='df -h'
alias memory-usage='free -h'
alias processes='ps aux | head -20'

{% elif user.role == 'developer' %}
# Developer-specific aliases
alias nginx-logs='sudo tail -f /var/log/nginx/error.log'
alias app-logs='sudo tail -f /var/log/{{ app_config.name | lower }}/*'
alias git-status='git status'
alias git-log='git log --oneline -10'

{% elif user.role == 'manager' %}
# Manager-specific aliases
alias system-status='uptime && df -h && free -h'
alias service-status='sudo systemctl status nginx mysql'

{% endif %}

# Custom functions
function mkcd() {
    mkdir -p "$1" && cd "$1"
}

function backup-home() {
    tar -czf "/tmp/home_{{ user.name }}_$(date +%Y%m%d_%H%M%S).tar.gz" -C /home "{{ user.name }}"
    echo "Home directory backed up to /tmp/"
}

# Welcome message
echo "Welcome {{ user.name }}! ({{ user.role | title }} - {{ user.department | title }})"
echo "Current time: $(date)"
echo "System load: $(uptime | cut -d',' -f3-)"

EOF

    # Source custom bashrc from main bashrc
    if ! grep -q "source ~/.bashrc_custom" "/home/{{ user.name }}/.bashrc" 2>/dev/null; then
        echo "source ~/.bashrc_custom" >> "/home/{{ user.name }}/.bashrc"
    fi
    
    chown "{{ user.name }}:{{ user.name }}" "/home/{{ user.name }}/.bashrc_custom"
    
    # Create user-specific scripts
    cat > "/home/{{ user.name }}/bin/user-info.sh" << 'EOF'
#!/bin/bash
# User information script for {{ user.name }}

echo "=== User Information ==="
echo "Username: {{ user.name }}"
echo "Full Name: $(getent passwd {{ user.name }} | cut -d: -f5)"
echo "Role: {{ user.role | title }}"
echo "Department: {{ user.department | title }}"
echo "Email: {{ user.email }}"
echo "Active: {{ user.active }}"
echo "Groups: $(groups {{ user.name }})"
echo "Home Directory: /home/{{ user.name }}"
echo "Shell: $(getent passwd {{ user.name }} | cut -d: -f7)"
echo "Last Login: $(lastlog -u {{ user.name }} | tail -n 1)"
echo ""
echo "=== Permissions ==="
{% for permission in user.permissions %}
echo "- {{ permission }}"
{% endfor %}
EOF

    chmod +x "/home/{{ user.name }}/bin/user-info.sh"
    chown "{{ user.name }}:{{ user.name }}" "/home/{{ user.name }}/bin/user-info.sh"
    
    {% endfor %}
}

# Generate user report
generate_report() {
    log "Generating user management report..."
    
    REPORT_FILE="/tmp/user_management_report_$(date +%Y%m%d_%H%M%S).txt"
    
    cat > "$REPORT_FILE" << 'EOF'
# User Management Report
Generated: $(date)
Application: {{ app_config.name }}
Environment: {{ app_config.environment }}

## User Summary
Total users: {{ users | length }}
Active users: {{ users | selectattr('active') | list | length }}
Inactive users: {{ users | rejectattr('active') | list | length }}

## Users by Role
{% for role, role_users in users | groupby('role') %}
{{ role | title }}: {{ role_users | length }} users
{% for user in role_users %}
  - {{ user.name }} ({{ 'Active' if user.active else 'Inactive' }})
{% endfor %}

{% endfor %}

## Users by Department
{% for dept, dept_users in users | groupby('department') %}
{{ dept | title }}: {{ dept_users | length }} users
{% for user in dept_users %}
  - {{ user.name }} ({{ user.role }}) - {{ 'Active' if user.active else 'Inactive' }}
{% endfor %}

{% endfor %}

## Admin Users
{% for user in users if user.role == 'admin' %}
- {{ user.name }} ({{ user.email }})
{% endfor %}

## Newly Created Resources
- Groups created for departments and roles
- User home directories with workspace, bin, and logs folders
- SSH key placeholders
- Custom bashrc configurations
- User-specific utility scripts
- Sudo permissions configured

## Next Steps
1. Add actual SSH public keys to user .ssh/authorized_keys files
2. Set passwords for users: passwd <username>
3. Test user logins and permissions
4. Review and adjust sudo permissions as needed
5. Setup monitoring for user activities

EOF

    success "Report generated: $REPORT_FILE"
}

# Display usage
usage() {
    echo "Usage: $0 [OPTION]"
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -c, --create   Create users and groups"
    echo "  -r, --report   Generate user report only"
    echo "  -a, --all      Perform all operations (default)"
    echo ""
    echo "This script manages users for {{ app_config.name }} application"
    echo "Total users to process: {{ users | length }}"
    echo "Active users: {{ users | selectattr('active') | list | length }}"
}

# Main execution
main() {
    local operation="${1:-all}"
    
    case "$operation" in
        -h|--help)
            usage
            exit 0
            ;;
        -c|--create)
            check_root
            create_groups
            create_users
            setup_ssh_keys
            configure_sudo
            setup_user_environment
            success "User creation completed"
            ;;
        -r|--report)
            generate_report
            ;;
        -a|--all|*)
            check_root
            create_groups
            create_users
            setup_ssh_keys
            configure_sudo
            setup_user_environment
            generate_report
            success "All operations completed successfully"
            ;;
    esac
}

# Script header
echo "========================================"
echo "{{ app_config.name }} User Management Script"
echo "Version: {{ app_config.version }}"
echo "Generated: {{ ansible_date_time.iso8601 }}"
echo "========================================"

# Run main function with all arguments
main "$@" 