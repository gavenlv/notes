# Docker Compose for {{ app_config.name }}
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
# Environment: {{ app_config.environment }}

version: '3.8'

services:
  # Nginx Web Server
  nginx:
    image: nginx:1.21-alpine
    container_name: {{ app_config.name | lower }}_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/ssl/nginx:ro
      - ./logs/nginx:/var/log/nginx
      - web_content:/var/www/html
    depends_on:
      - app
    networks:
      - frontend
      - backend
    environment:
      - NGINX_WORKER_PROCESSES={{ ansible_processor_vcpus }}
      - NGINX_WORKER_CONNECTIONS=1024
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`{{ websites[0].domain if websites else ansible_default_ipv4.address }}`)"
      {% if websites and websites[0].ssl %}
      - "traefik.http.routers.nginx.tls=true"
      {% endif %}

  # Application Server
  app:
    {% if app_config.environment == 'production' %}
    image: {{ app_config.name | lower }}:{{ app_config.version }}
    {% else %}
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV={{ app_config.environment }}
        - APP_VERSION={{ app_config.version }}
    {% endif %}
    container_name: {{ app_config.name | lower }}_app
    restart: unless-stopped
    {% if app_config.environment != 'production' %}
    ports:
      - "3000:3000"
    {% endif %}
    volumes:
      - app_data:/app/data
      - ./logs/app:/app/logs
      {% if app_config.environment == 'development' %}
      - ./src:/app/src
      - ./config:/app/config
      {% endif %}
    environment:
      - NODE_ENV={{ app_config.environment }}
      - APP_NAME={{ app_config.name }}
      - APP_VERSION={{ app_config.version }}
      - PORT=3000
      {% set db_servers = servers | selectattr('role', 'equalto', 'database') | list %}
      - DATABASE_HOST={% if db_servers %}{{ db_servers[0].ip }}{% else %}mysql{% endif %}
      - DATABASE_PORT=3306
      - DATABASE_NAME={{ app_config.name | lower }}_{{ app_config.environment }}
      - DATABASE_USER={{ app_config.name | lower }}_user
      - DATABASE_PASSWORD={{ app_config.name | lower }}_password_{{ app_config.environment }}
      {% set api_servers = servers | selectattr('role', 'equalto', 'api') | list %}
      {% if api_servers %}
      - REDIS_HOST={{ api_servers[0].ip }}
      {% else %}
      - REDIS_HOST=redis
      {% endif %}
      - REDIS_PORT=6379
      - REDIS_DB={{ 0 if app_config.environment == 'production' else 1 }}
      - LOG_LEVEL={% if app_config.environment == 'production' %}warn{% elif app_config.environment == 'staging' %}info{% else %}debug{% endif %}
      - DEBUG={{ app_config.environment != 'production' }}
    depends_on:
      {% if not (servers | selectattr('role', 'equalto', 'database') | list) %}
      - mysql
      {% endif %}
      {% if not (servers | selectattr('role', 'equalto', 'api') | list) %}
      - redis
      {% endif %}
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    {% if app_config.environment == 'production' %}
    deploy:
      replicas: {{ ansible_processor_vcpus }}
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    {% endif %}

  {% if not (servers | selectattr('role', 'equalto', 'database') | list) %}
  # MySQL Database (only if no external database servers)
  mysql:
    image: mysql:8.0
    container_name: {{ app_config.name | lower }}_mysql
    restart: unless-stopped
    {% if app_config.environment != 'production' %}
    ports:
      - "3306:3306"
    {% endif %}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
      - ./mysql/conf:/etc/mysql/conf.d:ro
      - ./logs/mysql:/var/log/mysql
    environment:
      - MYSQL_ROOT_PASSWORD={{ app_config.name | lower }}_root_{{ app_config.environment }}
      - MYSQL_DATABASE={{ app_config.name | lower }}_{{ app_config.environment }}
      - MYSQL_USER={{ app_config.name | lower }}_user
      - MYSQL_PASSWORD={{ app_config.name | lower }}_password_{{ app_config.environment }}
    networks:
      - backend
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size={% if app_config.environment == 'production' %}2G{% else %}512M{% endif %}
      --max-connections={% if app_config.environment == 'production' %}500{% else %}100{% endif %}
      --query-cache-size=0
      --query-cache-type=0
      --log-bin=/var/log/mysql/mysql-bin.log
      --expire-logs-days=7
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p{{ app_config.name | lower }}_root_{{ app_config.environment }}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  {% endif %}

  {% if not (servers | selectattr('role', 'equalto', 'api') | list) %}
  # Redis Cache (only if no external cache servers)
  redis:
    image: redis:7-alpine
    container_name: {{ app_config.name | lower }}_redis
    restart: unless-stopped
    {% if app_config.environment != 'production' %}
    ports:
      - "6379:6379"
    {% endif %}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./logs/redis:/var/log/redis
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - backend
    environment:
      - REDIS_PASSWORD={{ app_config.name | lower }}_redis_{{ app_config.environment }}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  {% endif %}

  {% if monitoring.enabled | default(false) %}
  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: {{ app_config.name | lower }}_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    environment:
      - PROMETHEUS_ENV={{ app_config.environment }}

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: {{ app_config.name | lower }}_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD={{ app_config.name | lower }}_grafana_{{ app_config.environment }}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - monitoring
    depends_on:
      - prometheus

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: {{ app_config.name | lower }}_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
  {% endif %}

  {% if app_config.environment != 'production' %}
  # Development tools
  adminer:
    image: adminer:latest
    container_name: {{ app_config.name | lower }}_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=mysql
    networks:
      - backend
    depends_on:
      {% if not (servers | selectattr('role', 'equalto', 'database') | list) %}
      - mysql
      {% endif %}

  # Mail catcher for development
  mailhog:
    image: mailhog/mailhog:latest
    container_name: {{ app_config.name | lower }}_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - backend
  {% endif %}

# Networks
networks:
  frontend:
    driver: bridge
    name: {{ app_config.name | lower }}_frontend
  backend:
    driver: bridge
    name: {{ app_config.name | lower }}_backend
    internal: {% if app_config.environment == 'production' %}true{% else %}false{% endif %}
  {% if monitoring.enabled | default(false) %}
  monitoring:
    driver: bridge
    name: {{ app_config.name | lower }}_monitoring
  {% endif %}

# Volumes
volumes:
  web_content:
    driver: local
    name: {{ app_config.name | lower }}_web_content
  app_data:
    driver: local
    name: {{ app_config.name | lower }}_app_data
  {% if not (servers | selectattr('role', 'equalto', 'database') | list) %}
  mysql_data:
    driver: local
    name: {{ app_config.name | lower }}_mysql_data
  {% endif %}
  {% if not (servers | selectattr('role', 'equalto', 'api') | list) %}
  redis_data:
    driver: local
    name: {{ app_config.name | lower }}_redis_data
  {% endif %}
  {% if monitoring.enabled | default(false) %}
  prometheus_data:
    driver: local
    name: {{ app_config.name | lower }}_prometheus_data
  grafana_data:
    driver: local
    name: {{ app_config.name | lower }}_grafana_data
  {% endif %}

# Additional configuration for production
{% if app_config.environment == 'production' %}
configs:
  nginx_config:
    file: ./nginx/nginx.conf
  app_config:
    file: ./config/production.yml

secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
  app_secret_key:
    file: ./secrets/app_secret_key.txt
{% endif %} 