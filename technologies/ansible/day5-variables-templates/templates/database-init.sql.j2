-- Database Initialization Script for {{ app_config.name }}
-- Generated by Ansible on {{ ansible_date_time.iso8601 }}
-- Environment: {{ app_config.environment }}
-- Database: {{ database_name }}

-- Set SQL mode and character set
SET sql_mode = 'STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO';
SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Create database if not exists
CREATE DATABASE IF NOT EXISTS `{{ database_name }}` 
CHARACTER SET utf8mb4 
COLLATE utf8mb4_unicode_ci;

USE `{{ database_name }}`;

-- ============================================
-- User Management Tables
-- ============================================

-- Users table
CREATE TABLE IF NOT EXISTS `users` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(50) NOT NULL,
  `email` varchar(100) NOT NULL,
  `password_hash` varchar(255) NOT NULL,
  `first_name` varchar(50) DEFAULT NULL,
  `last_name` varchar(50) DEFAULT NULL,
  `role` enum('admin','developer','manager','designer') NOT NULL DEFAULT 'developer',
  `department` varchar(50) DEFAULT NULL,
  `is_active` boolean NOT NULL DEFAULT TRUE,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password_changed_at` timestamp NULL DEFAULT NULL,
  `last_login_at` timestamp NULL DEFAULT NULL,
  `login_attempts` int unsigned NOT NULL DEFAULT 0,
  `locked_until` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_users_username` (`username`),
  UNIQUE KEY `uk_users_email` (`email`),
  KEY `idx_users_role` (`role`),
  KEY `idx_users_department` (`department`),
  KEY `idx_users_active` (`is_active`),
  KEY `idx_users_created` (`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User profiles table
CREATE TABLE IF NOT EXISTS `user_profiles` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint unsigned NOT NULL,
  `avatar_url` varchar(255) DEFAULT NULL,
  `phone` varchar(20) DEFAULT NULL,
  `bio` text,
  `timezone` varchar(50) DEFAULT 'UTC',
  `language` varchar(10) DEFAULT 'en',
  `preferences` json DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_user_profiles_user_id` (`user_id`),
  CONSTRAINT `fk_user_profiles_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Permissions table
CREATE TABLE IF NOT EXISTS `permissions` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `description` text,
  `resource` varchar(50) NOT NULL,
  `action` varchar(50) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_permissions_name` (`name`),
  KEY `idx_permissions_resource` (`resource`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User permissions junction table
CREATE TABLE IF NOT EXISTS `user_permissions` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint unsigned NOT NULL,
  `permission_id` bigint unsigned NOT NULL,
  `granted_by` bigint unsigned DEFAULT NULL,
  `granted_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `expires_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_user_permissions` (`user_id`, `permission_id`),
  KEY `idx_user_permissions_user` (`user_id`),
  KEY `idx_user_permissions_permission` (`permission_id`),
  CONSTRAINT `fk_user_permissions_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  CONSTRAINT `fk_user_permissions_permission_id` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`) ON DELETE CASCADE,
  CONSTRAINT `fk_user_permissions_granted_by` FOREIGN KEY (`granted_by`) REFERENCES `users` (`id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ============================================
-- Application Tables
-- ============================================

-- Application configuration table
CREATE TABLE IF NOT EXISTS `app_config` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `key` varchar(100) NOT NULL,
  `value` text,
  `type` enum('string','integer','boolean','json') NOT NULL DEFAULT 'string',
  `description` text,
  `is_encrypted` boolean NOT NULL DEFAULT FALSE,
  `updated_by` bigint unsigned DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_app_config_key` (`key`),
  CONSTRAINT `fk_app_config_updated_by` FOREIGN KEY (`updated_by`) REFERENCES `users` (`id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Audit log table
CREATE TABLE IF NOT EXISTS `audit_logs` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint unsigned DEFAULT NULL,
  `action` varchar(100) NOT NULL,
  `resource_type` varchar(50) DEFAULT NULL,
  `resource_id` varchar(100) DEFAULT NULL,
  `old_values` json DEFAULT NULL,
  `new_values` json DEFAULT NULL,
  `ip_address` varchar(45) DEFAULT NULL,
  `user_agent` text,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `idx_audit_logs_user` (`user_id`),
  KEY `idx_audit_logs_action` (`action`),
  KEY `idx_audit_logs_resource` (`resource_type`, `resource_id`),
  KEY `idx_audit_logs_created` (`created_at`),
  CONSTRAINT `fk_audit_logs_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Sessions table
CREATE TABLE IF NOT EXISTS `sessions` (
  `id` varchar(128) NOT NULL,
  `user_id` bigint unsigned DEFAULT NULL,
  `ip_address` varchar(45) DEFAULT NULL,
  `user_agent` text,
  `payload` longtext NOT NULL,
  `last_activity` int unsigned NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `idx_sessions_user_id` (`user_id`),
  KEY `idx_sessions_last_activity` (`last_activity`),
  CONSTRAINT `fk_sessions_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ============================================
-- System Monitoring Tables
-- ============================================

-- System metrics table
CREATE TABLE IF NOT EXISTS `system_metrics` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `hostname` varchar(255) NOT NULL,
  `metric_name` varchar(100) NOT NULL,
  `metric_value` decimal(15,4) NOT NULL,
  `unit` varchar(20) DEFAULT NULL,
  `tags` json DEFAULT NULL,
  `recorded_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `idx_system_metrics_hostname` (`hostname`),
  KEY `idx_system_metrics_name` (`metric_name`),
  KEY `idx_system_metrics_recorded` (`recorded_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Application logs table
CREATE TABLE IF NOT EXISTS `application_logs` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `level` enum('DEBUG','INFO','WARNING','ERROR','CRITICAL') NOT NULL,
  `message` text NOT NULL,
  `context` json DEFAULT NULL,
  `user_id` bigint unsigned DEFAULT NULL,
  `request_id` varchar(100) DEFAULT NULL,
  `file` varchar(255) DEFAULT NULL,
  `line` int unsigned DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `idx_application_logs_level` (`level`),
  KEY `idx_application_logs_user` (`user_id`),
  KEY `idx_application_logs_request` (`request_id`),
  KEY `idx_application_logs_created` (`created_at`),
  CONSTRAINT `fk_application_logs_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ============================================
-- Insert Initial Permissions
-- ============================================

INSERT INTO `permissions` (`name`, `description`, `resource`, `action`) VALUES
('users.read', 'Read user information', 'users', 'read'),
('users.write', 'Create and update users', 'users', 'write'),
('users.delete', 'Delete users', 'users', 'delete'),
('users.admin', 'Full user administration', 'users', 'admin'),
('config.read', 'Read application configuration', 'config', 'read'),
('config.write', 'Update application configuration', 'config', 'write'),
('logs.read', 'Read application logs', 'logs', 'read'),
('system.monitor', 'Monitor system metrics', 'system', 'monitor'),
('system.admin', 'Full system administration', 'system', 'admin')
ON DUPLICATE KEY UPDATE `description`=VALUES(`description`);

-- ============================================
-- Insert Initial Users
-- ============================================

{% for user in admin_users %}
-- Insert admin user: {{ user.name }}
INSERT INTO `users` (
  `username`, 
  `email`, 
  `password_hash`, 
  `first_name`, 
  `last_name`, 
  `role`, 
  `department`, 
  `is_active`,
  `email_verified_at`
) VALUES (
  '{{ user.name }}',
  '{{ user.email }}',
  '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewgZXQb5vGGY.IIy', -- password: admin123
  '{{ user.name | title }}',
  'Administrator',
  '{{ user.role }}',
  '{{ user.department }}',
  {{ user.active | lower }},
  NOW()
) ON DUPLICATE KEY UPDATE
  `email` = VALUES(`email`),
  `role` = VALUES(`role`),
  `department` = VALUES(`department`),
  `is_active` = VALUES(`is_active`);

-- Insert user profile for {{ user.name }}
INSERT INTO `user_profiles` (
  `user_id`,
  `timezone`,
  `language`,
  `preferences`
) SELECT 
  `id`,
  'Asia/Shanghai',
  'zh-CN',
  JSON_OBJECT(
    'theme', 'light',
    'notifications', true,
    'dashboard_widgets', JSON_ARRAY('system_status', 'recent_logs', 'user_activity')
  )
FROM `users` 
WHERE `username` = '{{ user.name }}'
ON DUPLICATE KEY UPDATE
  `timezone` = VALUES(`timezone`),
  `preferences` = VALUES(`preferences`);

-- Grant admin permissions to {{ user.name }}
INSERT INTO `user_permissions` (`user_id`, `permission_id`)
SELECT u.id, p.id
FROM `users` u
CROSS JOIN `permissions` p
WHERE u.username = '{{ user.name }}'
{% if user.role == 'admin' %}
AND p.name IN ('users.admin', 'config.write', 'logs.read', 'system.admin')
{% else %}
AND p.name IN ('users.read', 'config.read', 'logs.read', 'system.monitor')
{% endif %}
ON DUPLICATE KEY UPDATE `granted_at` = CURRENT_TIMESTAMP;

{% endfor %}

-- ============================================
-- Insert Initial Configuration
-- ============================================

INSERT INTO `app_config` (`key`, `value`, `type`, `description`) VALUES
('app.name', '{{ app_config.name }}', 'string', 'Application name'),
('app.version', '{{ app_config.version }}', 'string', 'Application version'),
('app.environment', '{{ app_config.environment }}', 'string', 'Application environment'),
('app.debug', '{{ app_config.environment != "production" }}', 'boolean', 'Debug mode enabled'),
('auth.session_timeout', '{{ 3600 if app_config.environment == "production" else 7200 }}', 'integer', 'Session timeout in seconds'),
('auth.max_login_attempts', '5', 'integer', 'Maximum login attempts before lockout'),
('auth.lockout_duration', '300', 'integer', 'Account lockout duration in seconds'),
('cache.enabled', '{{ (servers | selectattr("role", "equalto", "api") | list | length > 0) | lower }}', 'boolean', 'Cache system enabled'),
('monitoring.enabled', '{{ monitoring.enabled | default(false) | lower }}', 'boolean', 'Monitoring system enabled'),
('backup.enabled', '{{ app_config.environment == "production" }}', 'boolean', 'Automated backup enabled'),
('ssl.enabled', '{{ (websites and websites[0].ssl) | default(false) | lower }}', 'boolean', 'SSL/TLS enabled'),
('maintenance.mode', 'false', 'boolean', 'Maintenance mode'),
('features.new_dashboard', '{{ app_config.environment != "production" }}', 'boolean', 'New dashboard enabled'),
('features.experimental_api', '{{ app_config.environment == "development" }}', 'boolean', 'Experimental API features')
ON DUPLICATE KEY UPDATE 
  `value` = VALUES(`value`),
  `updated_at` = CURRENT_TIMESTAMP;

-- ============================================
-- Create Views for Common Queries
-- ============================================

-- Active users view
CREATE OR REPLACE VIEW `v_active_users` AS
SELECT 
  u.id,
  u.username,
  u.email,
  u.role,
  u.department,
  u.last_login_at,
  up.timezone,
  up.language,
  COUNT(DISTINCT uper.permission_id) as permission_count
FROM users u
LEFT JOIN user_profiles up ON u.id = up.user_id
LEFT JOIN user_permissions uper ON u.id = uper.user_id
WHERE u.is_active = TRUE
GROUP BY u.id, u.username, u.email, u.role, u.department, u.last_login_at, up.timezone, up.language;

-- User permissions view
CREATE OR REPLACE VIEW `v_user_permissions` AS
SELECT 
  u.id as user_id,
  u.username,
  u.role,
  p.name as permission_name,
  p.description as permission_description,
  p.resource,
  p.action,
  up.granted_at,
  up.expires_at
FROM users u
JOIN user_permissions up ON u.id = up.user_id
JOIN permissions p ON up.permission_id = p.id
WHERE u.is_active = TRUE
AND (up.expires_at IS NULL OR up.expires_at > NOW());

-- System health view
CREATE OR REPLACE VIEW `v_system_health` AS
SELECT 
  hostname,
  COUNT(*) as metric_count,
  MAX(recorded_at) as last_update,
  ROUND(AVG(CASE WHEN metric_name = 'cpu_usage' THEN metric_value END), 2) as avg_cpu,
  ROUND(AVG(CASE WHEN metric_name = 'memory_usage' THEN metric_value END), 2) as avg_memory,
  ROUND(AVG(CASE WHEN metric_name = 'disk_usage' THEN metric_value END), 2) as avg_disk
FROM system_metrics
WHERE recorded_at > DATE_SUB(NOW(), INTERVAL 1 HOUR)
GROUP BY hostname;

-- ============================================
-- Create Stored Procedures
-- ============================================

DELIMITER $$

-- Procedure to clean old audit logs
CREATE PROCEDURE IF NOT EXISTS `sp_cleanup_audit_logs`(IN retention_days INT)
BEGIN
  DECLARE rows_deleted INT DEFAULT 0;
  
  DELETE FROM audit_logs 
  WHERE created_at < DATE_SUB(NOW(), INTERVAL retention_days DAY);
  
  SET rows_deleted = ROW_COUNT();
  
  INSERT INTO audit_logs (action, resource_type, new_values, created_at)
  VALUES ('cleanup_audit_logs', 'system', JSON_OBJECT('rows_deleted', rows_deleted, 'retention_days', retention_days), NOW());
END$$

-- Procedure to check user permissions
CREATE PROCEDURE IF NOT EXISTS `sp_check_user_permission`(
  IN p_user_id BIGINT UNSIGNED,
  IN p_permission_name VARCHAR(50),
  OUT p_has_permission BOOLEAN
)
BEGIN
  DECLARE permission_count INT DEFAULT 0;
  
  SELECT COUNT(*)
  INTO permission_count
  FROM user_permissions up
  JOIN permissions p ON up.permission_id = p.id
  WHERE up.user_id = p_user_id
    AND p.name = p_permission_name
    AND (up.expires_at IS NULL OR up.expires_at > NOW());
  
  SET p_has_permission = (permission_count > 0);
END$$

DELIMITER ;

-- ============================================
-- Create Triggers
-- ============================================

DELIMITER $$

-- Trigger to log user changes
CREATE TRIGGER IF NOT EXISTS `tr_users_audit` 
AFTER UPDATE ON `users`
FOR EACH ROW
BEGIN
  INSERT INTO audit_logs (user_id, action, resource_type, resource_id, old_values, new_values)
  VALUES (
    NEW.id,
    'user_updated',
    'users',
    NEW.id,
    JSON_OBJECT(
      'username', OLD.username,
      'email', OLD.email,
      'role', OLD.role,
      'is_active', OLD.is_active
    ),
    JSON_OBJECT(
      'username', NEW.username,
      'email', NEW.email,
      'role', NEW.role,
      'is_active', NEW.is_active
    )
  );
END$$

-- Trigger to create user profile automatically
CREATE TRIGGER IF NOT EXISTS `tr_users_create_profile`
AFTER INSERT ON `users`
FOR EACH ROW
BEGIN
  INSERT INTO user_profiles (user_id, timezone, language)
  VALUES (NEW.id, 'Asia/Shanghai', 'zh-CN');
END$$

DELIMITER ;

-- ============================================
-- Create Indexes for Performance
-- ============================================

-- Additional indexes for better query performance
CREATE INDEX `idx_audit_logs_composite` ON `audit_logs` (`action`, `resource_type`, `created_at`);
CREATE INDEX `idx_system_metrics_composite` ON `system_metrics` (`hostname`, `metric_name`, `recorded_at`);
CREATE INDEX `idx_application_logs_composite` ON `application_logs` (`level`, `created_at`);

-- ============================================
-- Database Initialization Complete
-- ============================================

INSERT INTO application_logs (level, message, context, created_at) VALUES 
('INFO', 'Database initialization completed successfully', 
 JSON_OBJECT(
   'database', '{{ database_name }}',
   'environment', '{{ app_config.environment }}',
   'version', '{{ app_config.version }}',
   'admin_users_created', {{ admin_users | length }},
   'tables_created', 12,
   'views_created', 3,
   'procedures_created', 2,
   'triggers_created', 2
 ), 
 NOW());

-- Show summary
SELECT 
  'Database initialization completed' as status,
  '{{ database_name }}' as database_name,
  '{{ app_config.environment }}' as environment,
  COUNT(DISTINCT table_name) as tables_created
FROM information_schema.tables 
WHERE table_schema = '{{ database_name }}'
  AND table_type = 'BASE TABLE';

-- Show created users
SELECT 
  username,
  email,
  role,
  department,
  is_active,
  created_at
FROM users
ORDER BY created_at DESC; 