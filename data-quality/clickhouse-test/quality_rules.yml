# 数据质量测试规则
# 这个文件定义了针对测试数据库的数据质量规则

# 完整性检查规则
- rule_type: "completeness"
  version: "1.0"
  description: "用户表完整性检查"
  rule:
    name: "users_completeness_check"
    description: "检查用户表中的空值和缺失值"
    category: "completeness"
    priority: "high"
    enabled: true
    
    # 目标表配置
    target:
      database: "data_quality_test"
      table: "users"
      partition_key: "created_date"
      
    # 要检查的列
    columns:
      - name: "user_id"
        data_type: "UInt32"
        nullable: false
        required: true
        
      - name: "email"
        data_type: "String"
        nullable: false
        required: true
        
      - name: "name"
        data_type: "String"
        nullable: false
        required: true
        
      - name: "age"
        data_type: "UInt8"
        nullable: true
        required: false
        
    # 完整性检查
    checks:
      # 检查必填列中的空值
      null_check:
        enabled: true
        severity: "high"
        description: "检查必填列中的空值"
        
      # 检查空字符串
      empty_string_check:
        enabled: true
        severity: "medium"
        description: "检查空字符串值"
        
      # 检查重复用户ID
      duplicate_check:
        enabled: true
        key_columns: ["user_id"]
        severity: "critical"
        description: "检查重复的用户ID"
    
    # SQL查询模板
    template: |
      -- 用户表完整性检查
      WITH completeness_metrics AS (
        SELECT
          -- 空值检查
          COUNT(*) as total_rows,
          COUNT(CASE WHEN user_id IS NULL THEN 1 END) as user_id_nulls,
          COUNT(CASE WHEN email IS NULL THEN 1 END) as email_nulls,
          COUNT(CASE WHEN name IS NULL THEN 1 END) as name_nulls,
          COUNT(CASE WHEN age IS NULL THEN 1 END) as age_nulls,
          
          -- 空字符串检查
          COUNT(CASE WHEN email = '' THEN 1 END) as empty_emails,
          COUNT(CASE WHEN name = '' THEN 1 END) as empty_names,
          
          -- 重复检查
          COUNT(DISTINCT user_id) as unique_user_ids,
          COUNT(*) as total_user_ids
        FROM data_quality_test.users
        WHERE created_date >= today() - 30
      )
      SELECT
        total_rows,
        user_id_nulls,
        email_nulls,
        name_nulls,
        age_nulls,
        empty_emails,
        empty_names,
        total_user_ids - unique_user_ids as duplicate_user_ids,
        CASE 
          WHEN user_id_nulls > 0 OR email_nulls > 0 OR name_nulls > 0 THEN 'FAIL'
          WHEN empty_emails > 0 OR empty_names > 0 THEN 'FAIL'
          WHEN total_user_ids - unique_user_ids > 0 THEN 'FAIL'
          ELSE 'PASS'
        END as check_result
      FROM completeness_metrics

# 准确性检查规则
- rule_type: "accuracy"
  version: "1.0"
  description: "产品表数据范围检查"
  rule:
    name: "products_data_range_check"
    description: "检查产品表中的数据范围"
    category: "accuracy"
    priority: "high"
    enabled: true
    
    # 目标表配置
    target:
      database: "data_quality_test"
      table: "products"
      partition_key: "updated_date"
      
    # 要检查的列
    columns:
      - name: "price"
        data_type: "Decimal"
        validation_rules:
          - type: "range"
            min_value: "0.01"
            max_value: "10000.00"
          - type: "not_null"
            required: true
            
      - name: "stock_quantity"
        data_type: "Int32"
        validation_rules:
          - type: "range"
            min_value: "0"
            max_value: "100000"
          - type: "not_null"
            required: true
            
      - name: "weight"
        data_type: "Decimal"
        validation_rules:
          - type: "range"
            min_value: "0.01"
            max_value: "1000.00"
          - type: "not_null"
            required: false
    
    # SQL查询模板
    template: |
      -- 产品表数据范围检查
      WITH data_range_metrics AS (
        SELECT
          COUNT(*) as total_rows,
          COUNT(CASE WHEN price < 0.01 OR price > 10000.00 THEN 1 END) as price_range_violations,
          COUNT(CASE WHEN price IS NULL THEN 1 END) as null_price_count,
          COUNT(CASE WHEN stock_quantity < 0 OR stock_quantity > 100000 THEN 1 END) as stock_range_violations,
          COUNT(CASE WHEN stock_quantity IS NULL THEN 1 END) as null_stock_count,
          COUNT(CASE WHEN weight IS NOT NULL AND (weight < 0.01 OR weight > 1000.00) THEN 1 END) as weight_range_violations,
          COUNT(CASE WHEN price < 0 THEN 1 END) as negative_price_count,
          COUNT(CASE WHEN stock_quantity < 0 THEN 1 END) as negative_stock_count,
          COUNT(CASE WHEN weight IS NOT NULL AND weight < 0 THEN 1 END) as negative_weight_count
        FROM data_quality_test.products
        WHERE updated_date >= today() - 30
      )
      SELECT
        total_rows,
        price_range_violations,
        null_price_count,
        stock_range_violations,
        null_stock_count,
        weight_range_violations,
        negative_price_count,
        negative_stock_count,
        negative_weight_count,
        CASE 
          WHEN price_range_violations > 0 OR null_price_count > 0 THEN 'FAIL'
          WHEN stock_range_violations > 0 OR null_stock_count > 0 THEN 'FAIL'
          WHEN weight_range_violations > 0 THEN 'FAIL'
          WHEN negative_price_count > 0 OR negative_stock_count > 0 OR negative_weight_count > 0 THEN 'FAIL'
          ELSE 'PASS'
        END as check_result
      FROM data_range_metrics

# 一致性检查规则
- rule_type: "consistency"
  version: "1.0"
  description: "订单和客户表引用完整性检查"
  rule:
    name: "orders_customers_referential_integrity"
    description: "检查订单表和客户表之间的引用完整性"
    category: "consistency"
    priority: "high"
    enabled: true
    
    # 目标表配置
    target:
      database: "data_quality_test"
      table: "orders"
      partition_key: "created_date"
      
    # 相关表
    related_tables:
      - database: "data_quality_test"
        table: "customers"
        relationship: "foreign_key"
        key_columns: ["customer_id"]
        reference_columns: ["customer_id"]
    
    # SQL查询模板
    template: |
      -- 订单和客户表引用完整性检查
      WITH referential_metrics AS (
        SELECT
          COUNT(*) as total_orders,
          COUNT(CASE WHEN customer_id IS NOT NULL AND customer_id NOT IN (
            SELECT customer_id FROM data_quality_test.customers
          ) THEN 1 END) as invalid_reference_count,
          COUNT(CASE WHEN customer_id IS NULL THEN 1 END) as null_customer_id_count
        FROM data_quality_test.orders
        WHERE created_date >= today() - 30
      )
      SELECT
        total_orders,
        invalid_reference_count,
        null_customer_id_count,
        CASE 
          WHEN invalid_reference_count > 0 THEN 'FAIL'
          WHEN null_customer_id_count > 0 THEN 'FAIL'
          ELSE 'PASS'
        END as check_result
      FROM referential_metrics

# 大小写敏感性检查规则
- rule_type: "consistency"
  version: "1.0"
  description: "用户表邮箱大小写一致性检查"
  rule:
    name: "users_email_case_sensitivity"
    description: "检查用户表中邮箱的大小写一致性"
    category: "consistency"
    priority: "medium"
    enabled: true
    
    # 目标表配置
    target:
      database: "data_quality_test"
      table: "users"
      
    # SQL查询模板
    template: |
      -- 用户表邮箱大小写一致性检查
      WITH case_sensitivity_metrics AS (
        SELECT
          COUNT(*) as total_rows,
          COUNT(CASE WHEN email != LOWER(email) THEN 1 END) as not_lowercase_count
        FROM data_quality_test.users
        WHERE created_date >= today() - 30
      )
      SELECT
        total_rows,
        not_lowercase_count,
        CASE 
          WHEN not_lowercase_count > 0 THEN 'FAIL'
          ELSE 'PASS'
        END as check_result
      FROM case_sensitivity_metrics